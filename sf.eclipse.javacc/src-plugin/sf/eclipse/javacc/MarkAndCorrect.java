package sf.eclipse.javacc;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ProjectScope;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.preferences.IEclipsePreferences;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.JavaModelException;

/**
 * Mark and Correct files generated by JavaCC 
 * This class is only used by JJBuilder
 * Direct access was tested because of JDT cached copy, but didn't work as expected. 
 * 
 * @author Remi Koutcherawy 2003-2007 CeCILL license
 *         http://www.cecill.info/index.en.html
 */
public class MarkAndCorrect implements IJJConstants{
  
  // The pattern captures the class declaration 
  // including eventual @SuppressWarnings prefix
  // Only one group is non capturing (not prefixed by ?:)
  // This group $1 will by prefixed and put back replacing the whole match $0
  // ^(?:@SuppressWarnings\(\"(?:all|serial)\"\)..?)?((?:public )?(?:final )?(?:class|interface|enum))
  private final static String 
  reg = "^(?:@SuppressWarnings\\(\\\"(?:all|serial)\\\"\\)..?)?((?:public )?(?:final )?(?:class|interface|enum))"; //$NON-NLS-1$
  private final static Pattern filepattern = Pattern.compile(reg, Pattern.MULTILINE|Pattern.DOTALL); //$NON-NLS-1$
  
  /**
   * Mark generated files
   * @param pro IProject the resource belongs to
   * @param name the name of the grammar file this resource is generated from
   * @param res IResource to mark and to correct
   */
  public static void markAndCorrect(IProject pro, String name, IResource res) throws CoreException, JavaModelException {
      // Mark
      res.setDerived(true);
      res.setPersistentProperty(QN_GENERATED_FILE, name);

      IEclipsePreferences prefs = new ProjectScope(res.getProject()).getNode(IJJConstants.ID);

      // Correct
      IJavaElement element = (IJavaElement) res.getAdapter(IJavaElement.class);
      if ("true".equals(prefs.get(SUPPRESS_WARNINGS, "false")) //$NON-NLS-1$ //$NON-NLS-2$
          && element instanceof ICompilationUnit) { 
//        ICompilationUnit cu = (ICompilationUnit) element;
//        String source = cu.getBuffer().getContents();
      String filename = ((IFile) res).getLocation().toOSString();
      String source = FileUtils.getFileContents(filename); // Direct access

      Matcher filematcher = filepattern.matcher(source);
      if (filematcher.find()) { 
//        System.out.print("Replace :["+filematcher.group(0)+ "] By :[");
//        System.out.println("@SuppressWarnings(\"all\")\n" + filematcher.group(1)+"]");
        String newsource = filematcher.replaceFirst("@SuppressWarnings(\"all\")\n$1"); //$NON-NLS-1$
//        cu.getBuffer().setContents(newsource);
//        cu.getBuffer().save(null, true);
          FileUtils.saveFileContents(filename, newsource);
        }
      }
  }
}
