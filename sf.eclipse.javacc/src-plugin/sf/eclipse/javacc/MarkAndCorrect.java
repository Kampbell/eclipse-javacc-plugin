package sf.eclipse.javacc;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.JavaModelException;

/**
 * Mark and Correct files generated by JavaCC 
 * This class is only used by JJBuilder
 * Direct access was tested because of JDT cached copy, but didn't work as expected. 
 * 
 * @author Remi Koutcherawy 2003-2007 CeCILL Licence
 *         http://www.cecill.info/index.en.html
 */
public class MarkAndCorrect implements IJJConstants{
  
  // The pattern has 2 groups and a non-capturing group
  // to identify even already treated files
  private final static String 
  reg = "^((?:public\\s+)?(?:final\\s+)?)(?:@SuppressWarnings\\(\\\"all\\\"\\)\\s+)?(class|interface|enum)"; //$NON-NLS-1$
  private final static Pattern filepattern = Pattern.compile(reg, Pattern.MULTILINE); //$NON-NLS-1$

  /**
   * Mark generated files
   * @param pro IProject the resource belongs to
   * @param name the name of the grammar file this resource is generated from
   * @param res IResource to mark and to correct
   */
  public static void markAndCorrect(IProject pro, String name, IResource res) throws CoreException, JavaModelException {
      // Mark
      res.setDerived(true);
      res.setPersistentProperty(QN_GENERATED_FILE, name);

      // Correct
      IJavaElement element = (IJavaElement) res.getAdapter(IJavaElement.class);
      if ("true".equals(pro.getPersistentProperty(QN_SUPPRESS_WARNINGS)) //$NON-NLS-1$
          && element instanceof ICompilationUnit) { 
//        ICompilationUnit cu = (ICompilationUnit) element;
//        String source = cu.getBuffer().getContents();
      String filename = ((IFile) res).getLocation().toOSString();
      String source = FileUtils.getFileContents(filename); // Direct access

        Matcher filematcher = filepattern.matcher(source);
        if (filematcher.find()) {
          String newsource = filematcher.replaceFirst("$1@SuppressWarnings(\"all\") $2"); //$NON-NLS-1$
//          cu.getBuffer().setContents(newsource);
//          cu.getBuffer().save(null, true);
        FileUtils.saveFileContents(filename, newsource);
        }
      }
  }
}
